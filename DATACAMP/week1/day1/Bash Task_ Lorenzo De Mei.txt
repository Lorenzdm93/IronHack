Lorenzo@DESKTOP-HIBEIGH MINGW32 ~
$ cd lab-bash

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd lorem

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls
at.txt  at.txte  lorem-copy  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cd sed.txt
bash: cd: sed.txt: Not a directory

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cp sed.txt lorem-copy

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd lorem-copy

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ ls
dummy_file.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ ls
dummy_file.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ cp sed.txt
cp: missing destination file operand after 'sed.txt'
Try 'cp --help' for more information.

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ ls
dummy_file.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ cp sed.txt ~/lab-bash/lorem-copy
cp: cannot stat 'sed.txt': No such file or directory

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd lorem

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls
at.txt  at.txte  lorem-copy  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cp sed.txt ~/lab-bash/lorem-copy

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls
at.txt  at.txte  lorem-copy  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd lorem-copy

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ ls
dummy_file.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ ls
dummy_file.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd lorem

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls
at.txt  at.txte  lorem-copy  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cp ; ~/lab-bash/lorem-copy
cp: missing file operand
Try 'cp --help' for more information.
bash: /c/Users/Lorenzo/lab-bash/lorem-copy: Is a directory

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cp lorem.txt ; at.txt ~/lab-bash/lorem-copy
cp: missing destination file operand after 'lorem.txt'
Try 'cp --help' for more information.
bash: at.txt: command not found

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cp --help
Usage: cp [OPTION]... [-T] SOURCE DEST
  or:  cp [OPTION]... SOURCE... DIRECTORY
  or:  cp [OPTION]... -t DIRECTORY SOURCE...
Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.

Mandatory arguments to long options are mandatory for short options too.
  -a, --archive                same as -dR --preserve=all
      --attributes-only        don't copy the file data, just the attributes
      --backup[=CONTROL]       make a backup of each existing destination file
  -b                           like --backup but does not accept an argument
      --copy-contents          copy contents of special files when recursive
  -d                           same as --no-dereference --preserve=links
  -f, --force                  if an existing destination file cannot be
                                 opened, remove it and try again (this option
                                 is ignored when the -n option is also used)
  -i, --interactive            prompt before overwrite (overrides a previous -n
                                  option)
  -H                           follow command-line symbolic links in SOURCE
  -l, --link                   hard link files instead of copying
  -L, --dereference            always follow symbolic links in SOURCE
  -n, --no-clobber             do not overwrite an existing file (overrides
                                 a previous -i option)
  -P, --no-dereference         never follow symbolic links in SOURCE
  -p                           same as --preserve=mode,ownership,timestamps
      --preserve[=ATTR_LIST]   preserve the specified attributes (default:
                                 mode,ownership,timestamps), if possible
                                 additional attributes: context, links, xattr,
                                 all
      --no-preserve=ATTR_LIST  don't preserve the specified attributes
      --parents                use full source file name under DIRECTORY
  -R, -r, --recursive          copy directories recursively
      --reflink[=WHEN]         control clone/CoW copies. See below
      --remove-destination     remove each existing destination file before
                                 attempting to open it (contrast with --force)
      --sparse=WHEN            control creation of sparse files. See below
      --strip-trailing-slashes  remove any trailing slashes from each SOURCE
                                 argument
  -s, --symbolic-link          make symbolic links instead of copying
  -S, --suffix=SUFFIX          override the usual backup suffix
  -t, --target-directory=DIRECTORY  copy all SOURCE arguments into DIRECTORY
  -T, --no-target-directory    treat DEST as a normal file
  -u, --update                 copy only when the SOURCE file is newer
                                 than the destination file or when the
                                 destination file is missing
  -v, --verbose                explain what is being done
  -x, --one-file-system        stay on this file system
  -Z                           set SELinux security context of destination
                                 file to default type
      --context[=CTX]          like -Z, or if CTX is specified then set the
                                 SELinux or SMACK security context to CTX
      --help     display this help and exit
      --version  output version information and exit

By default, sparse SOURCE files are detected by a crude heuristic and the
corresponding DEST file is made sparse as well.  That is the behavior
selected by --sparse=auto.  Specify --sparse=always to create a sparse DEST
file whenever the SOURCE file contains a long enough sequence of zero bytes.
Use --sparse=never to inhibit creation of sparse files.

When --reflink[=always] is specified, perform a lightweight copy, where the
data blocks are copied only when modified.  If this is not possible the copy
fails, or if --reflink=auto is specified, fall back to a standard copy.
Use --reflink=never to ensure a standard copy is performed.

The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.
The version control method may be selected via the --backup option or through
the VERSION_CONTROL environment variable.  Here are the values:

  none, off       never make backups (even if --backup is given)
  numbered, t     make numbered backups
  existing, nil   numbered if numbered backups exist, simple otherwise
  simple, never   always make simple backups

As a special case, cp makes a backup of SOURCE when the force and backup
options are given and SOURCE and DEST are the same name for an existing,
regular file.

GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
Report any translation bugs to <https://translationproject.org/team/>
Full documentation <https://www.gnu.org/software/coreutils/cp>
or available locally via: info '(coreutils) cp invocation'

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls
at.txt  at.txte  lorem-copy  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cp lorem.txt ~/lab-bash/lorem-copy ; cp at.txt ~/lab-bash/lorem-copy

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls
at.txt  at.txte  lorem-copy  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd lorem-copy

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ ls
at.txt  dummy_file.txt  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ ls
at.txt  dummy_file.txt  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ cat sed.txt
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.
Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,
sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.
Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit,
sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.
Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam,
nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur,
vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Homo homini lupus

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ cat at.txt
At vero eos ET accusamus ET iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum
deleniti atque corrupti quos dolores ET quas molestias excepturi sint occaecati cupiditate non
provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum ET dolorum fuga.
Et harum quidem rerum facilis est ET expedita distinctio.
Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod
maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.
Temporibus autem quibusdam ET aut officiis debitis aut rerum necessitatibus saepe eveniET
ut ET voluptates repudiandae sint ET molestiae non recusandae.
Itaque earum rerum hic tenETur a sapiente delectus, ut aut reiciendis voluptatibus maiores
alias consequatur aut perferendis doloribus asperiores repellat

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ cat ().txt
bash: syntax error near unexpected token `.txt'

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ cat lorem.txt
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ {sed.txt}
bash: $'\302\233{sed.txt}': command not found

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ head sed.txt
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.
Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,
sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.
Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit,
sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.
Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam,
nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur,
vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Homo homini lupus

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ head -n 3 sed.txt
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.
Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ tail -n 3 sed.txt
Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam,
nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur,
vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Homo homini lupus

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ add Homo Homini Lupus. sed.txt
bash: add: command not found

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ add "Homo hpmini lupus" >> sed.txt
bash: add: command not found

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ echo "Homo homini lupus." >> sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ tail -n 3 sed.txt
nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur,
vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Homo homini lupus
Homo homini lupus.

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem-copy (master)
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd lorem

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls
at.txt  at.txte  lorem-copy  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ head -n 3 ad.txt
head: cannot open 'ad.txt' for reading: No such file or directory

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ head -n 3 at.txt
At vero eos ET accusamus ET iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum
deleniti atque corrupti quos dolores ET quas molestias excepturi sint occaecati cupiditate non
provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum ET dolorum fuga.

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ sed "ET" >> "et" at.txt
sed: -e expression #1, char 1: unknown command: `E'

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ sed --help
Usage: sed [OPTION]... {script-only-if-no-other-script} [input-file]...

  -n, --quiet, --silent
                 suppress automatic printing of pattern space
      --debug
                 annotate program execution
  -e script, --expression=script
                 add the script to the commands to be executed
  -f script-file, --file=script-file
                 add the contents of script-file to the commands to be executed
  --follow-symlinks
                 follow symlinks when processing in place
  -i[SUFFIX], --in-place[=SUFFIX]
                 edit files in place (makes backup if SUFFIX supplied)
  -b, --binary
                 open files in binary mode (CR+LFs are not processed specially)
  -l N, --line-length=N
                 specify the desired line-wrap length for the `l' command
  --posix
                 disable all GNU extensions.
  -E, -r, --regexp-extended
                 use extended regular expressions in the script
                 (for portability use POSIX -E).
  -s, --separate
                 consider files as separate rather than as a single,
                 continuous long stream.
      --sandbox
                 operate in sandbox mode (disable e/r/w commands).
  -u, --unbuffered
                 load minimal amounts of data from the input files and flush
                 the output buffers more often
  -z, --null-data
                 separate lines by NUL characters
      --help     display this help and exit
      --version  output version information and exit

If no -e, --expression, -f, or --file option is given, then the first
non-option argument is taken as the sed script to interpret.  All
remaining arguments are names of input files; if no input files are
specified, then the standard input is read.

GNU sed home page: <https://www.gnu.org/software/sed/>.
General help using GNU software: <https://www.gnu.org/gethelp/>.
E-mail bug reports to: <bug-sed@gnu.org>.

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ^C

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ sed -i[et], --in-place[=ET] sed.txt
sed: unknown option -- in-place[=ET]
Usage: sed [OPTION]... {script-only-if-no-other-script} [input-file]...

  -n, --quiet, --silent
                 suppress automatic printing of pattern space
      --debug
                 annotate program execution
  -e script, --expression=script
                 add the script to the commands to be executed
  -f script-file, --file=script-file
                 add the contents of script-file to the commands to be executed
  --follow-symlinks
                 follow symlinks when processing in place
  -i[SUFFIX], --in-place[=SUFFIX]
                 edit files in place (makes backup if SUFFIX supplied)
  -b, --binary
                 open files in binary mode (CR+LFs are not processed specially)
  -l N, --line-length=N
                 specify the desired line-wrap length for the `l' command
  --posix
                 disable all GNU extensions.
  -E, -r, --regexp-extended
                 use extended regular expressions in the script
                 (for portability use POSIX -E).
  -s, --separate
                 consider files as separate rather than as a single,
                 continuous long stream.
      --sandbox
                 operate in sandbox mode (disable e/r/w commands).
  -u, --unbuffered
                 load minimal amounts of data from the input files and flush
                 the output buffers more often
  -z, --null-data
                 separate lines by NUL characters
      --help     display this help and exit
      --version  output version information and exit

If no -e, --expression, -f, or --file option is given, then the first
non-option argument is taken as the sed script to interpret.  All
remaining arguments are names of input files; if no input files are
specified, then the standard input is read.

GNU sed home page: <https://www.gnu.org/software/sed/>.
General help using GNU software: <https://www.gnu.org/gethelp/>.

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls
at.txt  at.txte  et  lorem-copy  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ sed -r -i.bak 's/ET/et/g' ~/sed.txt
sed: can't read /c/Users/Lorenzo/sed.txt: No such file or directory

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ sed -i -r 's/ET/et/g' at.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cat at.txt
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum
deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non
provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga.
Et harum quidem rerum facilis est et expedita distinctio.
Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod
maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.
Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet
ut et voluptates repudiandae sint et molestiae non recusandae.
Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores
alias consequatur aut perferendis doloribus asperiores repellat

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 /c/Users
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 /c
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 /
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 /
$ ls
LICENSE.txt        bin/  dev/  git-bash.exe*  magic.py  proc/  unins000.dat   unins000.msg
ReleaseNotes.html  cmd/  etc/  git-cmd.exe*   mingw32/  tmp/   unins000.exe*  usr/

Lorenzo@DESKTOP-HIBEIGH MINGW32 /
$ ls
LICENSE.txt        bin/  dev/  git-bash.exe*  magic.py  proc/  unins000.dat   unins000.msg
ReleaseNotes.html  cmd/  etc/  git-cmd.exe*   mingw32/  tmp/   unins000.exe*  usr/

Lorenzo@DESKTOP-HIBEIGH MINGW32 /
$ cd lorem
bash: cd: lorem: No such file or directory

Lorenzo@DESKTOP-HIBEIGH MINGW32 /
$ cd c

Lorenzo@DESKTOP-HIBEIGH MINGW32 /c
$ cd Users

Lorenzo@DESKTOP-HIBEIGH MINGW32 /c/Users
$ ls
'All Users'@   Default/  'Default User'@   Lorenzo/   Public/   desktop.ini

Lorenzo@DESKTOP-HIBEIGH MINGW32 /c/Users
$ cd ~

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~
$ ls
'3D Objects'/
 AppData/
 Contacts/
 Desktop/
 Documents/
 Downloads/
 Favorites/
 IntelGraphicsProfiles/
 IronHack/
'KMSAuto Net 2015 v1.3.8 Portable'/
 Links/
 MicrosoftEdgeBackups/
 Music/
 NTUSER.DAT
 NTUSER.DAT{88b6be00-dec7-11e9-ac96-b5161863e4ea}.TM.blf
 NTUSER.DAT{88b6be00-dec7-11e9-ac96-b5161863e4ea}.TMContainer00000000000000000001.regtrans-ms
 NTUSER.DAT{88b6be00-dec7-11e9-ac96-b5161863e4ea}.TMContainer00000000000000000002.regtrans-ms
'Nuova cartella'/
 OneDrive/
 Pictures/
'Saved Games'/
 Searches/
 Videos/
'VirtualBox VMs'/
 anaconda3/
'certifications Lorenzo'/
 lab-bash/
 ntuser.dat.LOG1
 ntuser.dat.LOG2

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~
$ cd lab-bash

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ git config --global -- get user.name
error: key does not contain a section: get

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ git config --global --get user.name
Lorenzo De Mei

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd *
bash: cd: too many arguments

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd *
bash: cd: too many arguments

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ pwd
/c/Users/Lorenzo/lab-bash

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ echo *.txt
*.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ echo ().txt
bash: syntax error near unexpected token `.txt'

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ git *.txt
git: '*.txt' is not a git command. See 'git --help'.

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ echo *.txt
*.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls *.txt
ls: cannot access '*.txt': No such file or directory

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd lorem

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls *.txt
at.txt  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cat sed.txt | wc sed.txt
  9 131 900 sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ^C

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cat /dir/file.txt | wc -l
cat: /dir/file.txt: No such file or directory
0

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cat /lorem/sed.txt | wc -l
cat: /lorem/sed.txt: No such file or directory
0

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ^C

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cat ~/lab-bash/lorem/sed.txt | wc -l
9

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls
at.txt  at.txte  et  lorem-copy  lorem.txt  sed.txt

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ cd ..

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ count lorem*
bash: count: command not found

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ git lorem* | wc -l
git: 'lorem' is not a git command. See 'git --help'.
0

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ count --help
bash: count: command not found

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls -1 | wc -l lorem*
wc: lorem: Is a directory
      0 lorem
wc: lorem-copy: Is a directory
      0 lorem-copy
      0 total

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ set -- lorem*

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ echo "$#"
2

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~
$ ls
'3D Objects'/
 AppData/
 Contacts/
 Desktop/
 Documents/
 Downloads/
 Favorites/
 IntelGraphicsProfiles/
 IronHack/
'KMSAuto Net 2015 v1.3.8 Portable'/
 Links/
 MicrosoftEdgeBackups/
 Music/
 NTUSER.DAT
 NTUSER.DAT{88b6be00-dec7-11e9-ac96-b5161863e4ea}.TM.blf
 NTUSER.DAT{88b6be00-dec7-11e9-ac96-b5161863e4ea}.TMContainer00000000000000000001.regtrans-ms
 NTUSER.DAT{88b6be00-dec7-11e9-ac96-b5161863e4ea}.TMContainer00000000000000000002.regtrans-ms
'Nuova cartella'/
 OneDrive/
 Pictures/
'Saved Games'/
 Searches/
 Videos/
'VirtualBox VMs'/
 anaconda3/
'certifications Lorenzo'/
 lab-bash/
 ntuser.dat.LOG1
 ntuser.dat.LOG2

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~
$ cd lab-bash

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ ls
exercices/  inputs/  lorem/  lorem-copy/  outputs/  readme.md

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash (master)
$ cd lorem

Lorenzo@DESKTOP-HIBEIGH MINGW32 ~/lab-bash/lorem (master)
$ ls -1 | wc -l lorem*
   9 lorem-copy
   3 lorem.txt
  12 total
